<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reverse on OPdbg</title>
    <link>https://www.codetea.top/categories/reverse/</link>
    <description>Recent content in reverse on OPdbg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 26 Feb 2022 11:36:23 +0800</lastBuildDate><atom:link href="https://www.codetea.top/categories/reverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>看穿你的逻辑 理解你表达的真谛</title>
      <link>https://www.codetea.top/posts/logic_re/</link>
      <pubDate>Sat, 26 Feb 2022 11:36:23 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/logic_re/</guid>
      <description>逻辑语句逆向分析 总结 # if分支 # if # Debug
0x00411a30 cmp dword [var_ch], 0x41 0x00411a34 jne 0x411a47 0x00411a36 mov eax, dword [var_ch] 0x00411a39 push eax 0x00411a3a push str.This_is_current_alpha:_c 0x00411a3f call fcn.004110d7 0x00411a44 add esp, 8 0x00411a47 mov esi, esp Release
0x004010a1 cmp dword [var_8h], 0x41 0x004010a5 jne 0x4010b6 0x004010a7 push 0x41 0x004010a9 push str.This_is_current_alpha:_c 0x004010ae call fcn.00401020 0x004010b3 add esp, 8 0x004010b6 push str.pause if_else # Debug
0x00411a30 cmp dword [var_ch], 0x41 0x00411a34 jne 0x411a49 0x00411a36 mov eax, dword [var_ch] 0x00411a39 push eax 0x00411a3a push str.</description>
    </item>
    
    <item>
      <title>寻找入口点 回归最开始的美好</title>
      <link>https://www.codetea.top/posts/entry_point/</link>
      <pubDate>Sat, 26 Feb 2022 11:12:10 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/entry_point/</guid>
      <description>寻找主函数 # 入口点（主函数）并不确定 &amp;ndash;&amp;gt; 编译器版本
寻找编译器特征 来确定 主函数
VS 2013-2017 特征 # 2015 Debug x86 # jmp mainCRTStartup里面的call 第二个call movzx test jz mov mov push call add push call add call(main) 最后一个call jmp main 2015 Release x86 # jmp call__p___argv mov call__p___argc mov call_get_initial_narrow_environment push push push call(main) main 2015 Debug x64 # jmp call 第二个call movzx test jz mov mov call xor call call(main) 最后一个call jmp main 2015 Release x64 # jmp call__p___argv movrdi, rax call__p___argc movrbx, rax call mov mov mov call(main) main 2017 Debug x86 # jmp call 第二个call movzx ecx, al testecx, ecx jz short loc_411E82 mov mov push call add call (main) 最后一个call jmp main 2017 Release x86 # jmp call mov call mov call push push push call(main) main 2017 Debug x64 # jmp call 第二个call movzx test jz mov mov call call(main) 最后一个call jmp main 2017 Release x64 # jmp call__p___argv mov call__p___argc mov call mov mov mov call(main) main 2019 Debug x86 # jmp call 第二个call movzx test jz mov mov push call add call(main) 最后一个call jmp main 2019 Release x86 # jmp call__p___argv mov call__p___argc push push push call(main) main 2019 Debug x64 # jmp call 第二个call movzx test jz mov mov call call(main) 最后一个call jmp main 2019 Release x64 # jmp call__p___argv mov call__p___argc push push push call(main) main 2022 Debug x86 # jmp call 第二个call movzx test je mov mov push call add call(main) 最后一个call jmp main 2022 Release x86 # call 第二个call movzx test je mov mov push call add call(main) 最后一个call main 2022 Debug x64 # jmp call 第二个call movzx test je mov mov call call(main) 最后一个call jmp main 2022 Release x64 # call__p___argv mov call__p___argc mov mov mov call(main) main MinGW GCC # x86 Debug # jmp call mov mov mov mov mov mov mov mov mov call(main) main x86 Release # jmp</description>
    </item>
    
    <item>
      <title>进制笔记</title>
      <link>https://www.codetea.top/posts/base_note/</link>
      <pubDate>Tue, 22 Feb 2022 20:05:38 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/base_note/</guid>
      <description>进制 # 进制的概念 # 进制是什么？
对于任何一种进制—X进制，就表示每一位置上的数运算时都是逢X进一位。
二进制：0、1 八进制：0、1、2、3、4、5、6、7 十进制：0、1、2、3、4、5、6、7、8、9 十六进制：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F N进制：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F、N-1 进制的运算 # 进制转换
十六进制与二进制转换
0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111 0 1 2 3 4 5 6 7 8 9 A B C D E F 二进制到十六进制转换
1 1 1 1 8 4 2 1 8+4+2+1 = 15(F)
原码反码补码 # 原码： # 最高位是符号位，1是负数，0是正数，其他位是原值的绝对值。
反码： # 反码通常是用来由原码求补码或者由补码求原码的过渡码。反码跟原码是正数时，一样；负数时，反码就是原码符号位除外，其他位按位取反。
补码： # 正数时，补码和原码一样。负数时，补码是反码+1.</description>
    </item>
    
    <item>
      <title>汇编语言 笔记</title>
      <link>https://www.codetea.top/posts/asm/</link>
      <pubDate>Thu, 03 Feb 2022 09:56:53 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/asm/</guid>
      <description>汇编语言 # 概述 # 编程形式
开关&amp;ndash;&amp;gt;打孔&amp;ndash;&amp;gt;输入设备
汇编语言的出现
mov eax, 5 mov ebx, 6 add eax, ebx 汇编程序的执行
汇编代码 -&amp;gt; 汇编程序 -&amp;gt; 处理器可识别 01010101 -&amp;gt; 处理器执行
学习汇编的意义 # 开发时调试 逆向时候的代码阅读 某些特殊技术的使用（如shellcode、壳） shellcode：可以运行在任意位置的代码（汇编语言）
壳：加壳或脱壳都需要用的汇编语言
环境配置
Ollydbg
Visual Studio 2015
x16 汇编 # 通用寄存器 # 16位寄存器 高8位 低8位 AX AH AL BX BH BL CX CH CL DX DH DL SI \ \ DI \ \ SP \ \ BP \ \ 内存字节序 # :chestnut: 0x12345678</description>
    </item>
    
  </channel>
</rss>
