<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on OPdbg</title>
    <link>https://www.codetea.top/tags/java/</link>
    <description>Recent content in java on OPdbg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 29 Jan 2022 19:01:51 +0800</lastBuildDate><atom:link href="https://www.codetea.top/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java面向对象之多态 笔记</title>
      <link>https://www.codetea.top/posts/java-polymorphic/</link>
      <pubDate>Sat, 29 Jan 2022 19:01:51 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/java-polymorphic/</guid>
      <description>Java面向对象之多态 # 方法重写 # 子类和父类同名方法 # 子类和父类同名方法，方法重写
前提：需要有继承关系
方法重写表现：
方法名必须相同
参数列表必须相同
返回值类型必须相同
修饰符：范围可以扩大或相同，但是不能缩小 public &amp;gt; protected &amp;gt;default
方法重写
public class Animal { public void eat() { System.out.println(&amp;#34;动物去吃东西&amp;#34;); } } public class Cat extends Animal { public void eat() { System.out.println(&amp;#34;猫喜欢吃鱼&amp;#34;); } } public class Dog { public void eat() { System.out.println(&amp;#34;狗喜欢吃骨头&amp;#34;); } } 不能重写父类的private方法，如果定义的话只是定义了一个新方法，不是方法重写
运行时多态 # 后期绑定
如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也被称之为后期绑定
运行时多态
方法重写是根据实际的类型决定调用哪个重写的方法，发生在运行期间，也叫做运行时多态
多态
public class Animal { public void eat() { System.out.println(&amp;#34;动物去吃东西&amp;#34;); } } public class Cat extends Animal { public void eat() { System.</description>
    </item>
    
    <item>
      <title>Java面向对象之继承 笔记</title>
      <link>https://www.codetea.top/posts/java-extends/</link>
      <pubDate>Sat, 29 Jan 2022 18:54:26 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/java-extends/</guid>
      <description>Java面向对象之继承 # 类的继承机制 # 继承的的作用 # 继承的作用：减少重复的冗余的相同属性和方法
多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中
那么多个类无需再定义这些相同属性和行为，只要继承那个类即可
public class Person { // 姓名 private String name; // 年龄 private int age; public void setName(String name) { this.name = name; } public void setAge(int age) { this.age = age; } public void eat() { System.out.println(&amp;#34;吃饭&amp;#34;); } } public class Student extends Person { } 子类和父类的继承机制 # 继承关系是两个类，一个为子类（派生类），一个父类（基类）。 子类继承父类，使用关键字extends来表示 extends的意思是“扩展”，子类是对父类的扩展 java中类只有单继承，没有多继承（一个儿子只有一个直接的爸爸，但是爸爸可以有多个儿子） Java的单继承 # Java不支持多继承，只允许一个类直接继承另一个类 子类只能有一个父类，extends关键字后面只能有一个类名 Java继承的顶级父类：Object类简介 # Object类是Java中所有类的始祖 Java中的每一个类都是由它扩展而来，但是并不需要明确写出要继承它 自然的，所有Java类都拥有了其方法 toString()方法</description>
    </item>
    
    <item>
      <title>Java 面向对象之类和对象 笔记</title>
      <link>https://www.codetea.top/posts/java-object/</link>
      <pubDate>Sat, 29 Jan 2022 18:47:56 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/java-object/</guid>
      <description>Java 面向对象之类和对象 # 面向对象与面向过程 # 面向过程 # 面向过程编程就是分析出解决问题的步骤 然后使用函数把这些步骤一步步实现 重心放在完成的每个过程上 面向对象 # 构成问题事务分解成各个对象 描述某个事物在整个解决问题的步骤中的行为 面向过程和面向对象区别 # 面向过程就是步骤，就是解决问题按部就班 面向对象关注的解决问题所需要的对象 面向过程就是自己办事，面向对象就是托人办事 现实世界的面向对象 # 类和对象：
类(class)是抽象的 对象(object)是具体的 汽车类(class) –new–&amp;gt;实例(instance)
Java的类和对象 # Java的类 # 类可以看作是一个模板 用于描述一类对象的行为和状态 Java的类的描述 # public class Person { // 姓名 String name; // 年龄 int age; // 身高 int height; // 唱歌 void sing() { } // 跳舞 void dance() { } } Java的对象 # 万物皆对象 对象是具体的物体 拥有属性 拥有行为 把很多零散的构建成一个整体 具有唯一性 类和创建对象 # public class Person { // 姓名 String name; // 年龄 int age; // 身高 int height; public static void main(String[] args) { Person p = new Person(); p.</description>
    </item>
    
    <item>
      <title>Java基础语法 笔记</title>
      <link>https://www.codetea.top/posts/java-basic/</link>
      <pubDate>Sat, 29 Jan 2022 16:27:52 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/java-basic/</guid>
      <description>Java基础语法 # 概述 # JVM
JVM：Java虚拟机，简称JVM Java程序的跨平台性的核心是JVM JRE和JDK
JRE：Java程序运行环境 JDK：Java程序开发工具包 安装 # Java官方网站：http://oracle.com
Java JDK SE8
环境变量：Java_Home
%Java_Home% /bin
bin目录：
java.exe
javac.exe
第一个Java程序 # Java是纯面向对象高级编程语言
开发步骤
定义类 class public classclass名与源文件名一致，且一个文件只能有一个 主方法 main 入口函数 系统输出：编译 public class HelloWorld { /** * public class：公共类名，一个文件只有一个 * 类名：HelloWorld 与文件名一致 */ public static void main(String[] args) { /** * static：静态 * void：返回值的类型 * main：方法名，严格定义 * String：字符串 * []：数组 * args：参数名 */ Syetem.out.print(&amp;#34;1.Hello World!&amp;#34;); // 不换行输出 System.</description>
    </item>
    
  </channel>
</rss>
