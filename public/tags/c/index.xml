<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on OPdbg</title>
    <link>https://www.codetea.top/tags/c/</link>
    <description>Recent content in C on OPdbg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Feb 2022 19:01:04 +0800</lastBuildDate><atom:link href="https://www.codetea.top/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C语言核心内容 笔记</title>
      <link>https://www.codetea.top/posts/c-core/</link>
      <pubDate>Tue, 01 Feb 2022 19:01:04 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/c-core/</guid>
      <description>C语言核心 # 函数 # 基本函数
#include &amp;lt;stdio.h&amp;gt; // 函数的声明 void Hello(); int main() { // 最简单函数的调用 Hello(); return 0; } void Hello() { printf(&amp;#34;Hello!\n&amp;#34;); } #include &amp;lt;stdio.h&amp;gt; void Hello() { printf(&amp;#34;Hello!\n&amp;#34;); } int main() { // 最简单函数的调用 Hello(); return 0; } 函数的定义 # 返回值类型 函数名(参数列表) { 函数体 } 函数声明 # 所谓声明就是（Declaration）,就是告诉编译器我要使用这个函数，你现在没有找到它的定义不要紧，请不要报错，稍后我会把定义补上
参数 # 形参 形式参数
实参 实际参数
传值和传址 # 传递数值 会受到作用域的限制
传递地址 任意门不会受到作用域的限制
可变参数 # #include &amp;lt;stdarg.h&amp;gt;
va_list va_start va_arg va_end #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>C语言基础 笔记</title>
      <link>https://www.codetea.top/posts/c-basic/</link>
      <pubDate>Tue, 01 Feb 2022 18:48:50 +0800</pubDate>
      
      <guid>https://www.codetea.top/posts/c-basic/</guid>
      <description>C语言基础 # 概述 # main函数 # main函数是C语言的主函数，每个C语言程序都必须存在一个main函数，因为在程序开始的时候就会调用，它是程序执行的起点，当main函数的类型为int的时候表示函数返回一个整数值，类型为VOID表示函数不接受任何参数。main函数的函数体包括左花括号和右花括号之间的任何内容。
printf函数 # printf()函数是格式化输出函数，一般用于向标准输出设备按规定格式输出信息
printf()函数的调用格式为：printf(&amp;quot;&amp;lt;格式化字符串&amp;gt;, &amp;lt;参量表&amp;gt;&amp;quot;)
格式输出，它是c语言中产生格式化输出的函数（在stdio.h中定义）。用于向终端（显示器、控制台等）输出字符。格式控制由要输出的文字和数据格式说明组成。要输出的文字除了可以使用字母、数字、空格和一些数字符号以外，还可以使用一些转义字符表示特殊的含义。主要包括%d, %o, %x, %g, %c, %s, 以及换行符\n
空白与注释 # 空白在C语言里并没有什么特殊的约定来限制你的使用，它的作用仅仅只是似的程序更好理解，更好的显示出程序的结构，仅此而已
在C语言里存在以下两种注释方式
// 单行注释 /*多行注释*/ 基础介绍 # 运行机制：C语言–&amp;gt; 汇编语言–&amp;gt;机器语言–&amp;gt;CPU
编译型语言VS解释性语言
编译型语言：编译为可执行文件，直接由CPU执行 解释型语言：编译为字节码，由解释器交给CPU执行 程序执行 # 编写 gcc test.c -o test编译 ./test执行 格式化输入
#include &amp;lt;studio.h&amp;gt; int main(){ printf(&amp;#39;hello world&amp;#39;); return 0; } 输入输出函数 # 输入函数 scanf(&amp;quot;%?&amp;quot;, temp);
输出函数 printf(&amp;quot;%?&amp;quot;, temp);
转义字符 # 转义字符 含义 \a 响铃(BEL) \b 退格(BS)，将当前位置移到前一列 \f 换页(FF)，将当前位置移到下页开头 \n 换行(LF)，将当前位置移到下一行开头 \r 回车(CR)，将当前位置移到本行开头 \t 水平制表(HT)，跳到下一个TAB位置 \v 垂直制表 \\ 表示(\) \&#39; 表示(‘) \&amp;quot; 表示(“) \?</description>
    </item>
    
  </channel>
</rss>
